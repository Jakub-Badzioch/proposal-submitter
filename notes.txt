Do zrobienia:
1. AdviceController.handleMethodArgumentNotValidException()
   Czy dobrze wykonałem treść zadania: pobierz wszystkie bledy i przemapuj na fielderrordto
2. Pogadajmy o bardziej skomplikowanych funkcjach mapstruct
3. Nauczyć się używać mailtrap.io
4. Nastepnym razem: logowanie, sprawdzenie dostepow do endpointow i auditing bazujący na security
5. Zamień equals i hashcode na @Data

Przeczytać:
- @Transactional, acid, propagacja i izolacja
- optimistic locking i @Version
- metoda referencyjna
- wzorce projektowe: fabryka strategia

Fakty:
1. response entity zwraca jsona i zamiast stringa powinien byc obiekt ktory bedzie zserializowany do jsona
2. ta adnotacja @RequiredArgsConstructor generuje konstruktor dla wszystkich finalnych zmiennych
3. NIE UZYWAJ RESPONSEENTITY TYLKO OBIEKTOW DTO + RESPONSE STATUSY JAKO ADNOTACJE
   + ADVICE CONTROLLERA DO OBSŁUGI BLEDU I ZWROCENIA ODPOWIEDNIEGO STATUSU
4. W Maven clean usuwa folder target, compile kompiluje, a package buduje plik jar.
5. Mappery powinny być w  kontrollerze. W serwisach bazujemy tylko na dao a nie na dto
6. @JoinColumn(name = "...", referencedColumnName = "id") dodajemy tylko wtedy
   kiedy chcemy zmienic nazwe kolumny np do adnotacji many to many
7. ctrl alt O - optymalizuje importy
8. Metody zwracające booleana powinny się zaczynać od is albo has
9. Zmieniaj profile w application.yml np.:  profiles:active:mail
10. Collections.singletonList()/Map() itp są używane do zrobienia struktury danych z tylko jednym elementem
11. plik .jar:  https://www.samouczekprogramisty.pl/java-z-linii-polecen/
12. Olać aspekty nikt ich nie używa
13. W repo jesli wiemy ze zostanie zwrocone 1 lub 0 obiektow to opakowujemy w optionala
